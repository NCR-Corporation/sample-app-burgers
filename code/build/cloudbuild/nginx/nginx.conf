worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
					  
    access_log /var/log/nginx/access.log combined;
	
    sendfile on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types *;
    
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    upstream app_server {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response (in case the Unicorn master nukes a
        # single worker for timing out).
        server localhost:8000 fail_timeout=0;
    }

    server {
        listen 8080 default_server;
        client_max_body_size 4G;

        server_name localhost;

        keepalive_timeout 5;

        # path for static files
        root /app/dist;

        location / {
            # checks for static file, if not found proxy to app
            try_files $request_uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://app_server;
        }

        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /app/dist/static;
        }
    }
}
