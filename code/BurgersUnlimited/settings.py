"""
Django's settings for BurgersUnlimited project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import mimetypes
import sys
import socket

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATIC_ROOT = os.path.join(BASE_DIR, 'dist', 'static')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
sys.path.append(os.path.join(BASE_DIR, "code"))  # so you can import from code/

# Monkeypatch requests_panel
# try:
#     from monkeypatch_requests_panel import SafeRequestsDebugPanel
#     import requests_panel.panel
#     requests_panel.panel.RequestsDebugPanel = SafeRequestsDebugPanel
# except Exception as e:
#     print("[MONKEYPATCH] Failed to patch:", e)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$SECRET_KEY'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
mimetypes.add_type("application/javascript", ".js", True)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'burger',
    'users.apps.UsersConfig',
    'crispy_forms',
    'compressor',
    'debug_toolbar',
    'django_web_profiler',
    'requests_panel',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_web_profiler.middleware.DebugLoggingMiddleware',
]
ROOT_URLCONF = 'BurgersUnlimited.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'custom_tags': 'burger.templatetags.custom_tags'
            }
        },
    },
]

WSGI_APPLICATION = 'BurgersUnlimited.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_DIRS = [STATIC_DIR]
STATIC_URL = '/static/'

# Logging
# https://docs.djangoproject.com/en/3.1/topics/logging/

URLS = ['http://stage.testsite.com/', 'http://stage.testsite.com/testing/']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file_log': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR + '/logs/profiler.log',
            'backupCount': 5,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'request-logging': {
            'level': 'DEBUG',
            'handlers': ['console', 'file_log'],
            'propagate': False,
        },
    }
}

INTERNAL_IPS = ('127.0.0.1',)

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: True,
    'SHOW_COLLAPSED': True,
}
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.timer.TimerPanel',
    'requests_panel.panel.RequestsDebugPanel']

REQUESTS_PANEL_SETTINGS = {
    'SHOW_STACKTRACE': False,
    'SHOW_TRACEBACKS': False,
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# DO NOT COMMIT THESE VALUES
NEP_ORGANIZATION = ''
HMAC_SHARED_KEY = ''
HMAC_SECRET_KEY = ''

# Locations of the restaurants saved in a site name: id pattern
LOCATIONS = {}

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_SAVE_EVERY_REQUEST  = True
